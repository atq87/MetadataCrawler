/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.github.petersonjr.metadatacrawler.model;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** A table, which usually belongs to a schema and has columns */
@org.apache.avro.specific.AvroGenerated
public class Table extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7114258385900148638L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Table\",\"namespace\":\"io.github.petersonjr.metadatacrawler.model\",\"doc\":\"A table, which usually belongs to a schema and has columns\",\"fields\":[{\"name\":\"name\",\"type\":\"string\",\"doc\":\"The table name\"},{\"name\":\"type\",\"type\":[\"null\",\"string\"],\"doc\":\"The table type (VIEW, TABLE, etc)\",\"default\":null},{\"name\":\"qualified_name\",\"type\":[\"null\",\"string\"],\"doc\":\"The table's qualified name\",\"default\":null},{\"name\":\"remarks\",\"type\":[\"null\",\"string\"],\"doc\":\"Any remarks on the table\",\"default\":null},{\"name\":\"columns\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Column\",\"doc\":\"A table column\",\"fields\":[{\"name\":\"name\",\"type\":\"string\",\"doc\":\"The column name\"},{\"name\":\"qualified_name\",\"type\":[\"null\",\"string\"],\"doc\":\"The column's qualified name\",\"default\":null},{\"name\":\"number\",\"type\":[\"null\",\"int\"],\"doc\":\"The column number (0-based)\",\"default\":null},{\"name\":\"size\",\"type\":[\"null\",\"int\"],\"doc\":\"The column size\",\"default\":null},{\"name\":\"nullable\",\"type\":[\"null\",\"boolean\"],\"doc\":\"Is the column nullable?\",\"default\":null},{\"name\":\"primary_key\",\"type\":[\"null\",\"boolean\"],\"doc\":\"Is the column a primary key?\",\"default\":null},{\"name\":\"indexed\",\"type\":[\"null\",\"boolean\"],\"doc\":\"Is the column indexed?\",\"default\":null},{\"name\":\"column_type\",\"type\":[\"null\",\"string\"],\"doc\":\"The column type\",\"default\":null},{\"name\":\"native_type\",\"type\":[\"null\",\"string\"],\"doc\":\"The native column type (as defined by the datasource itself)\",\"default\":null},{\"name\":\"remarks\",\"type\":[\"null\",\"string\"],\"doc\":\"Any remarks on the column\",\"default\":null}]}}],\"doc\":\"The table's columns\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Table> ENCODER =
      new BinaryMessageEncoder<Table>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Table> DECODER =
      new BinaryMessageDecoder<Table>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Table> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Table> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Table>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Table to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Table from a ByteBuffer. */
  public static Table fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** The table name */
   private java.lang.CharSequence name;
  /** The table type (VIEW, TABLE, etc) */
   private java.lang.CharSequence type;
  /** The table's qualified name */
   private java.lang.CharSequence qualified_name;
  /** Any remarks on the table */
   private java.lang.CharSequence remarks;
  /** The table's columns */
   private java.util.List<io.github.petersonjr.metadatacrawler.model.Column> columns;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Table() {}

  /**
   * All-args constructor.
   * @param name The table name
   * @param type The table type (VIEW, TABLE, etc)
   * @param qualified_name The table's qualified name
   * @param remarks Any remarks on the table
   * @param columns The table's columns
   */
  public Table(java.lang.CharSequence name, java.lang.CharSequence type, java.lang.CharSequence qualified_name, java.lang.CharSequence remarks, java.util.List<io.github.petersonjr.metadatacrawler.model.Column> columns) {
    this.name = name;
    this.type = type;
    this.qualified_name = qualified_name;
    this.remarks = remarks;
    this.columns = columns;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return type;
    case 2: return qualified_name;
    case 3: return remarks;
    case 4: return columns;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: name = (java.lang.CharSequence)value$; break;
    case 1: type = (java.lang.CharSequence)value$; break;
    case 2: qualified_name = (java.lang.CharSequence)value$; break;
    case 3: remarks = (java.lang.CharSequence)value$; break;
    case 4: columns = (java.util.List<io.github.petersonjr.metadatacrawler.model.Column>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'name' field.
   * @return The table name
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * The table name
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return The table type (VIEW, TABLE, etc)
   */
  public java.lang.CharSequence getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * The table type (VIEW, TABLE, etc)
   * @param value the value to set.
   */
  public void setType(java.lang.CharSequence value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'qualified_name' field.
   * @return The table's qualified name
   */
  public java.lang.CharSequence getQualifiedName() {
    return qualified_name;
  }

  /**
   * Sets the value of the 'qualified_name' field.
   * The table's qualified name
   * @param value the value to set.
   */
  public void setQualifiedName(java.lang.CharSequence value) {
    this.qualified_name = value;
  }

  /**
   * Gets the value of the 'remarks' field.
   * @return Any remarks on the table
   */
  public java.lang.CharSequence getRemarks() {
    return remarks;
  }

  /**
   * Sets the value of the 'remarks' field.
   * Any remarks on the table
   * @param value the value to set.
   */
  public void setRemarks(java.lang.CharSequence value) {
    this.remarks = value;
  }

  /**
   * Gets the value of the 'columns' field.
   * @return The table's columns
   */
  public java.util.List<io.github.petersonjr.metadatacrawler.model.Column> getColumns() {
    return columns;
  }

  /**
   * Sets the value of the 'columns' field.
   * The table's columns
   * @param value the value to set.
   */
  public void setColumns(java.util.List<io.github.petersonjr.metadatacrawler.model.Column> value) {
    this.columns = value;
  }

  /**
   * Creates a new Table RecordBuilder.
   * @return A new Table RecordBuilder
   */
  public static io.github.petersonjr.metadatacrawler.model.Table.Builder newBuilder() {
    return new io.github.petersonjr.metadatacrawler.model.Table.Builder();
  }

  /**
   * Creates a new Table RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Table RecordBuilder
   */
  public static io.github.petersonjr.metadatacrawler.model.Table.Builder newBuilder(io.github.petersonjr.metadatacrawler.model.Table.Builder other) {
    return new io.github.petersonjr.metadatacrawler.model.Table.Builder(other);
  }

  /**
   * Creates a new Table RecordBuilder by copying an existing Table instance.
   * @param other The existing instance to copy.
   * @return A new Table RecordBuilder
   */
  public static io.github.petersonjr.metadatacrawler.model.Table.Builder newBuilder(io.github.petersonjr.metadatacrawler.model.Table other) {
    return new io.github.petersonjr.metadatacrawler.model.Table.Builder(other);
  }

  /**
   * RecordBuilder for Table instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Table>
    implements org.apache.avro.data.RecordBuilder<Table> {

    /** The table name */
    private java.lang.CharSequence name;
    /** The table type (VIEW, TABLE, etc) */
    private java.lang.CharSequence type;
    /** The table's qualified name */
    private java.lang.CharSequence qualified_name;
    /** Any remarks on the table */
    private java.lang.CharSequence remarks;
    /** The table's columns */
    private java.util.List<io.github.petersonjr.metadatacrawler.model.Column> columns;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.github.petersonjr.metadatacrawler.model.Table.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.qualified_name)) {
        this.qualified_name = data().deepCopy(fields()[2].schema(), other.qualified_name);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.remarks)) {
        this.remarks = data().deepCopy(fields()[3].schema(), other.remarks);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.columns)) {
        this.columns = data().deepCopy(fields()[4].schema(), other.columns);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Table instance
     * @param other The existing instance to copy.
     */
    private Builder(io.github.petersonjr.metadatacrawler.model.Table other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.type)) {
        this.type = data().deepCopy(fields()[1].schema(), other.type);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.qualified_name)) {
        this.qualified_name = data().deepCopy(fields()[2].schema(), other.qualified_name);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.remarks)) {
        this.remarks = data().deepCopy(fields()[3].schema(), other.remarks);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.columns)) {
        this.columns = data().deepCopy(fields()[4].schema(), other.columns);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'name' field.
      * The table name
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * The table name
      * @param value The value of 'name'.
      * @return This builder.
      */
    public io.github.petersonjr.metadatacrawler.model.Table.Builder setName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * The table name
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'name' field.
      * The table name
      * @return This builder.
      */
    public io.github.petersonjr.metadatacrawler.model.Table.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * The table type (VIEW, TABLE, etc)
      * @return The value.
      */
    public java.lang.CharSequence getType() {
      return type;
    }

    /**
      * Sets the value of the 'type' field.
      * The table type (VIEW, TABLE, etc)
      * @param value The value of 'type'.
      * @return This builder.
      */
    public io.github.petersonjr.metadatacrawler.model.Table.Builder setType(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.type = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * The table type (VIEW, TABLE, etc)
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'type' field.
      * The table type (VIEW, TABLE, etc)
      * @return This builder.
      */
    public io.github.petersonjr.metadatacrawler.model.Table.Builder clearType() {
      type = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'qualified_name' field.
      * The table's qualified name
      * @return The value.
      */
    public java.lang.CharSequence getQualifiedName() {
      return qualified_name;
    }

    /**
      * Sets the value of the 'qualified_name' field.
      * The table's qualified name
      * @param value The value of 'qualified_name'.
      * @return This builder.
      */
    public io.github.petersonjr.metadatacrawler.model.Table.Builder setQualifiedName(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.qualified_name = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'qualified_name' field has been set.
      * The table's qualified name
      * @return True if the 'qualified_name' field has been set, false otherwise.
      */
    public boolean hasQualifiedName() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'qualified_name' field.
      * The table's qualified name
      * @return This builder.
      */
    public io.github.petersonjr.metadatacrawler.model.Table.Builder clearQualifiedName() {
      qualified_name = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'remarks' field.
      * Any remarks on the table
      * @return The value.
      */
    public java.lang.CharSequence getRemarks() {
      return remarks;
    }

    /**
      * Sets the value of the 'remarks' field.
      * Any remarks on the table
      * @param value The value of 'remarks'.
      * @return This builder.
      */
    public io.github.petersonjr.metadatacrawler.model.Table.Builder setRemarks(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.remarks = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'remarks' field has been set.
      * Any remarks on the table
      * @return True if the 'remarks' field has been set, false otherwise.
      */
    public boolean hasRemarks() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'remarks' field.
      * Any remarks on the table
      * @return This builder.
      */
    public io.github.petersonjr.metadatacrawler.model.Table.Builder clearRemarks() {
      remarks = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'columns' field.
      * The table's columns
      * @return The value.
      */
    public java.util.List<io.github.petersonjr.metadatacrawler.model.Column> getColumns() {
      return columns;
    }

    /**
      * Sets the value of the 'columns' field.
      * The table's columns
      * @param value The value of 'columns'.
      * @return This builder.
      */
    public io.github.petersonjr.metadatacrawler.model.Table.Builder setColumns(java.util.List<io.github.petersonjr.metadatacrawler.model.Column> value) {
      validate(fields()[4], value);
      this.columns = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'columns' field has been set.
      * The table's columns
      * @return True if the 'columns' field has been set, false otherwise.
      */
    public boolean hasColumns() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'columns' field.
      * The table's columns
      * @return This builder.
      */
    public io.github.petersonjr.metadatacrawler.model.Table.Builder clearColumns() {
      columns = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Table build() {
      try {
        Table record = new Table();
        record.name = fieldSetFlags()[0] ? this.name : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.type = fieldSetFlags()[1] ? this.type : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.qualified_name = fieldSetFlags()[2] ? this.qualified_name : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.remarks = fieldSetFlags()[3] ? this.remarks : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.columns = fieldSetFlags()[4] ? this.columns : (java.util.List<io.github.petersonjr.metadatacrawler.model.Column>) defaultValue(fields()[4]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Table>
    WRITER$ = (org.apache.avro.io.DatumWriter<Table>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Table>
    READER$ = (org.apache.avro.io.DatumReader<Table>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
