/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.github.petersonjr.metadatacrawler.model;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** A record representing a jdbc datasource, which contains one or more schemas as defined by JDBC */
@org.apache.avro.specific.AvroGenerated
public class JdbcDatasource extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6839641870329056928L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"JdbcDatasource\",\"namespace\":\"io.github.petersonjr.metadatacrawler.model\",\"doc\":\"A record representing a jdbc datasource, which contains one or more schemas as defined by JDBC\",\"fields\":[{\"name\":\"db_url\",\"type\":\"string\",\"doc\":\"The jdbc url used to connect to the database\"},{\"name\":\"db_server\",\"type\":[\"null\",\"string\"],\"doc\":\"The database server\",\"default\":null},{\"name\":\"db_port\",\"type\":[\"null\",\"string\"],\"doc\":\"The database port\",\"default\":null},{\"name\":\"db_product_name\",\"type\":[\"null\",\"string\"],\"doc\":\"The database product name\",\"default\":null},{\"name\":\"db_product_version\",\"type\":[\"null\",\"string\"],\"doc\":\"The database product version\",\"default\":null},{\"name\":\"crawl_tool\",\"type\":[\"null\",\"string\"],\"doc\":\"The name of the tool used to crawl the database\",\"default\":null},{\"name\":\"crawl_ts\",\"type\":[\"null\",\"string\"],\"doc\":\"The timestamp of the crawl\",\"default\":null},{\"name\":\"user_name\",\"type\":\"string\",\"doc\":\"The user name used to connect to the database\"},{\"name\":\"catalog_name\",\"type\":\"string\",\"doc\":\"The name of the catalog\"},{\"name\":\"has_error\",\"type\":[\"null\",\"boolean\"],\"doc\":\"Any error ocurred while crawling the catalog?\",\"default\":null},{\"name\":\"error_msg\",\"type\":[\"null\",\"string\"],\"doc\":\"If error ocurred, what's the error msg?\",\"default\":null},{\"name\":\"remarks\",\"type\":[\"null\",\"string\"],\"doc\":\"Any remarks on the catalog\",\"default\":null},{\"name\":\"schemas\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Schema\",\"doc\":\"A catalog's schema\",\"fields\":[{\"name\":\"name\",\"type\":\"string\",\"doc\":\"The schema name\"},{\"name\":\"qualified_name\",\"type\":[\"null\",\"string\"],\"doc\":\"The schemas='s qualified name\",\"default\":null},{\"name\":\"tables\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Table\",\"doc\":\"A table, which usually belongs to a schema and has columns\",\"fields\":[{\"name\":\"name\",\"type\":\"string\",\"doc\":\"The table name\"},{\"name\":\"type\",\"type\":[\"null\",\"string\"],\"doc\":\"The table type (VIEW, TABLE, etc)\",\"default\":null},{\"name\":\"qualified_name\",\"type\":[\"null\",\"string\"],\"doc\":\"The table's qualified name\",\"default\":null},{\"name\":\"remarks\",\"type\":[\"null\",\"string\"],\"doc\":\"Any remarks on the table\",\"default\":null},{\"name\":\"columns\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Column\",\"doc\":\"A table column\",\"fields\":[{\"name\":\"name\",\"type\":\"string\",\"doc\":\"The column name\"},{\"name\":\"qualified_name\",\"type\":[\"null\",\"string\"],\"doc\":\"The column's qualified name\",\"default\":null},{\"name\":\"number\",\"type\":[\"null\",\"int\"],\"doc\":\"The column number (0-based)\",\"default\":null},{\"name\":\"size\",\"type\":[\"null\",\"int\"],\"doc\":\"The column size\",\"default\":null},{\"name\":\"nullable\",\"type\":[\"null\",\"boolean\"],\"doc\":\"Is the column nullable?\",\"default\":null},{\"name\":\"primary_key\",\"type\":[\"null\",\"boolean\"],\"doc\":\"Is the column a primary key?\",\"default\":null},{\"name\":\"indexed\",\"type\":[\"null\",\"boolean\"],\"doc\":\"Is the column indexed?\",\"default\":null},{\"name\":\"column_type\",\"type\":[\"null\",\"string\"],\"doc\":\"The column type\",\"default\":null},{\"name\":\"native_type\",\"type\":[\"null\",\"string\"],\"doc\":\"The native column type (as defined by the datasource itself)\",\"default\":null},{\"name\":\"remarks\",\"type\":[\"null\",\"string\"],\"doc\":\"Any remarks on the column\",\"default\":null}]}}],\"doc\":\"The table's columns\",\"default\":null}]}}],\"doc\":\"The schemas' tables\",\"default\":null},{\"name\":\"relationships\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Relationship\",\"doc\":\"Relationship between two tables, where one set of columns is the primary key, and another set is the foreign key\",\"fields\":[{\"name\":\"primary_table\",\"type\":\"string\",\"doc\":\"The table of the primary key column(s)\"},{\"name\":\"primary_columns\",\"type\":{\"type\":\"array\",\"items\":\"string\"},\"doc\":\"The primary key columns of this relationship\",\"default\":[]},{\"name\":\"foreign_table\",\"type\":\"string\",\"doc\":\"The table of the foreign key column(s).\"},{\"name\":\"foreign_columns\",\"type\":{\"type\":\"array\",\"items\":\"string\"},\"doc\":\"The foreign key columns of this relationship\",\"default\":[]}]}}],\"doc\":\"The schemas' tables relationships\",\"default\":null}]}}],\"doc\":\"The catalog's schemas\",\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<JdbcDatasource> ENCODER =
      new BinaryMessageEncoder<JdbcDatasource>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<JdbcDatasource> DECODER =
      new BinaryMessageDecoder<JdbcDatasource>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<JdbcDatasource> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<JdbcDatasource> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<JdbcDatasource>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this JdbcDatasource to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a JdbcDatasource from a ByteBuffer. */
  public static JdbcDatasource fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** The jdbc url used to connect to the database */
   private java.lang.CharSequence db_url;
  /** The database server */
   private java.lang.CharSequence db_server;
  /** The database port */
   private java.lang.CharSequence db_port;
  /** The database product name */
   private java.lang.CharSequence db_product_name;
  /** The database product version */
   private java.lang.CharSequence db_product_version;
  /** The name of the tool used to crawl the database */
   private java.lang.CharSequence crawl_tool;
  /** The timestamp of the crawl */
   private java.lang.CharSequence crawl_ts;
  /** The user name used to connect to the database */
   private java.lang.CharSequence user_name;
  /** The name of the catalog */
   private java.lang.CharSequence catalog_name;
  /** Any error ocurred while crawling the catalog? */
   private java.lang.Boolean has_error;
  /** If error ocurred, what's the error msg? */
   private java.lang.CharSequence error_msg;
  /** Any remarks on the catalog */
   private java.lang.CharSequence remarks;
  /** The catalog's schemas */
   private java.util.List<io.github.petersonjr.metadatacrawler.model.Schema> schemas;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public JdbcDatasource() {}

  /**
   * All-args constructor.
   * @param db_url The jdbc url used to connect to the database
   * @param db_server The database server
   * @param db_port The database port
   * @param db_product_name The database product name
   * @param db_product_version The database product version
   * @param crawl_tool The name of the tool used to crawl the database
   * @param crawl_ts The timestamp of the crawl
   * @param user_name The user name used to connect to the database
   * @param catalog_name The name of the catalog
   * @param has_error Any error ocurred while crawling the catalog?
   * @param error_msg If error ocurred, what's the error msg?
   * @param remarks Any remarks on the catalog
   * @param schemas The catalog's schemas
   */
  public JdbcDatasource(java.lang.CharSequence db_url, java.lang.CharSequence db_server, java.lang.CharSequence db_port, java.lang.CharSequence db_product_name, java.lang.CharSequence db_product_version, java.lang.CharSequence crawl_tool, java.lang.CharSequence crawl_ts, java.lang.CharSequence user_name, java.lang.CharSequence catalog_name, java.lang.Boolean has_error, java.lang.CharSequence error_msg, java.lang.CharSequence remarks, java.util.List<io.github.petersonjr.metadatacrawler.model.Schema> schemas) {
    this.db_url = db_url;
    this.db_server = db_server;
    this.db_port = db_port;
    this.db_product_name = db_product_name;
    this.db_product_version = db_product_version;
    this.crawl_tool = crawl_tool;
    this.crawl_ts = crawl_ts;
    this.user_name = user_name;
    this.catalog_name = catalog_name;
    this.has_error = has_error;
    this.error_msg = error_msg;
    this.remarks = remarks;
    this.schemas = schemas;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return db_url;
    case 1: return db_server;
    case 2: return db_port;
    case 3: return db_product_name;
    case 4: return db_product_version;
    case 5: return crawl_tool;
    case 6: return crawl_ts;
    case 7: return user_name;
    case 8: return catalog_name;
    case 9: return has_error;
    case 10: return error_msg;
    case 11: return remarks;
    case 12: return schemas;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: db_url = (java.lang.CharSequence)value$; break;
    case 1: db_server = (java.lang.CharSequence)value$; break;
    case 2: db_port = (java.lang.CharSequence)value$; break;
    case 3: db_product_name = (java.lang.CharSequence)value$; break;
    case 4: db_product_version = (java.lang.CharSequence)value$; break;
    case 5: crawl_tool = (java.lang.CharSequence)value$; break;
    case 6: crawl_ts = (java.lang.CharSequence)value$; break;
    case 7: user_name = (java.lang.CharSequence)value$; break;
    case 8: catalog_name = (java.lang.CharSequence)value$; break;
    case 9: has_error = (java.lang.Boolean)value$; break;
    case 10: error_msg = (java.lang.CharSequence)value$; break;
    case 11: remarks = (java.lang.CharSequence)value$; break;
    case 12: schemas = (java.util.List<io.github.petersonjr.metadatacrawler.model.Schema>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'db_url' field.
   * @return The jdbc url used to connect to the database
   */
  public java.lang.CharSequence getDbUrl() {
    return db_url;
  }

  /**
   * Sets the value of the 'db_url' field.
   * The jdbc url used to connect to the database
   * @param value the value to set.
   */
  public void setDbUrl(java.lang.CharSequence value) {
    this.db_url = value;
  }

  /**
   * Gets the value of the 'db_server' field.
   * @return The database server
   */
  public java.lang.CharSequence getDbServer() {
    return db_server;
  }

  /**
   * Sets the value of the 'db_server' field.
   * The database server
   * @param value the value to set.
   */
  public void setDbServer(java.lang.CharSequence value) {
    this.db_server = value;
  }

  /**
   * Gets the value of the 'db_port' field.
   * @return The database port
   */
  public java.lang.CharSequence getDbPort() {
    return db_port;
  }

  /**
   * Sets the value of the 'db_port' field.
   * The database port
   * @param value the value to set.
   */
  public void setDbPort(java.lang.CharSequence value) {
    this.db_port = value;
  }

  /**
   * Gets the value of the 'db_product_name' field.
   * @return The database product name
   */
  public java.lang.CharSequence getDbProductName() {
    return db_product_name;
  }

  /**
   * Sets the value of the 'db_product_name' field.
   * The database product name
   * @param value the value to set.
   */
  public void setDbProductName(java.lang.CharSequence value) {
    this.db_product_name = value;
  }

  /**
   * Gets the value of the 'db_product_version' field.
   * @return The database product version
   */
  public java.lang.CharSequence getDbProductVersion() {
    return db_product_version;
  }

  /**
   * Sets the value of the 'db_product_version' field.
   * The database product version
   * @param value the value to set.
   */
  public void setDbProductVersion(java.lang.CharSequence value) {
    this.db_product_version = value;
  }

  /**
   * Gets the value of the 'crawl_tool' field.
   * @return The name of the tool used to crawl the database
   */
  public java.lang.CharSequence getCrawlTool() {
    return crawl_tool;
  }

  /**
   * Sets the value of the 'crawl_tool' field.
   * The name of the tool used to crawl the database
   * @param value the value to set.
   */
  public void setCrawlTool(java.lang.CharSequence value) {
    this.crawl_tool = value;
  }

  /**
   * Gets the value of the 'crawl_ts' field.
   * @return The timestamp of the crawl
   */
  public java.lang.CharSequence getCrawlTs() {
    return crawl_ts;
  }

  /**
   * Sets the value of the 'crawl_ts' field.
   * The timestamp of the crawl
   * @param value the value to set.
   */
  public void setCrawlTs(java.lang.CharSequence value) {
    this.crawl_ts = value;
  }

  /**
   * Gets the value of the 'user_name' field.
   * @return The user name used to connect to the database
   */
  public java.lang.CharSequence getUserName() {
    return user_name;
  }

  /**
   * Sets the value of the 'user_name' field.
   * The user name used to connect to the database
   * @param value the value to set.
   */
  public void setUserName(java.lang.CharSequence value) {
    this.user_name = value;
  }

  /**
   * Gets the value of the 'catalog_name' field.
   * @return The name of the catalog
   */
  public java.lang.CharSequence getCatalogName() {
    return catalog_name;
  }

  /**
   * Sets the value of the 'catalog_name' field.
   * The name of the catalog
   * @param value the value to set.
   */
  public void setCatalogName(java.lang.CharSequence value) {
    this.catalog_name = value;
  }

  /**
   * Gets the value of the 'has_error' field.
   * @return Any error ocurred while crawling the catalog?
   */
  public java.lang.Boolean getHasError() {
    return has_error;
  }

  /**
   * Sets the value of the 'has_error' field.
   * Any error ocurred while crawling the catalog?
   * @param value the value to set.
   */
  public void setHasError(java.lang.Boolean value) {
    this.has_error = value;
  }

  /**
   * Gets the value of the 'error_msg' field.
   * @return If error ocurred, what's the error msg?
   */
  public java.lang.CharSequence getErrorMsg() {
    return error_msg;
  }

  /**
   * Sets the value of the 'error_msg' field.
   * If error ocurred, what's the error msg?
   * @param value the value to set.
   */
  public void setErrorMsg(java.lang.CharSequence value) {
    this.error_msg = value;
  }

  /**
   * Gets the value of the 'remarks' field.
   * @return Any remarks on the catalog
   */
  public java.lang.CharSequence getRemarks() {
    return remarks;
  }

  /**
   * Sets the value of the 'remarks' field.
   * Any remarks on the catalog
   * @param value the value to set.
   */
  public void setRemarks(java.lang.CharSequence value) {
    this.remarks = value;
  }

  /**
   * Gets the value of the 'schemas' field.
   * @return The catalog's schemas
   */
  public java.util.List<io.github.petersonjr.metadatacrawler.model.Schema> getSchemas() {
    return schemas;
  }

  /**
   * Sets the value of the 'schemas' field.
   * The catalog's schemas
   * @param value the value to set.
   */
  public void setSchemas(java.util.List<io.github.petersonjr.metadatacrawler.model.Schema> value) {
    this.schemas = value;
  }

  /**
   * Creates a new JdbcDatasource RecordBuilder.
   * @return A new JdbcDatasource RecordBuilder
   */
  public static io.github.petersonjr.metadatacrawler.model.JdbcDatasource.Builder newBuilder() {
    return new io.github.petersonjr.metadatacrawler.model.JdbcDatasource.Builder();
  }

  /**
   * Creates a new JdbcDatasource RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new JdbcDatasource RecordBuilder
   */
  public static io.github.petersonjr.metadatacrawler.model.JdbcDatasource.Builder newBuilder(io.github.petersonjr.metadatacrawler.model.JdbcDatasource.Builder other) {
    return new io.github.petersonjr.metadatacrawler.model.JdbcDatasource.Builder(other);
  }

  /**
   * Creates a new JdbcDatasource RecordBuilder by copying an existing JdbcDatasource instance.
   * @param other The existing instance to copy.
   * @return A new JdbcDatasource RecordBuilder
   */
  public static io.github.petersonjr.metadatacrawler.model.JdbcDatasource.Builder newBuilder(io.github.petersonjr.metadatacrawler.model.JdbcDatasource other) {
    return new io.github.petersonjr.metadatacrawler.model.JdbcDatasource.Builder(other);
  }

  /**
   * RecordBuilder for JdbcDatasource instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<JdbcDatasource>
    implements org.apache.avro.data.RecordBuilder<JdbcDatasource> {

    /** The jdbc url used to connect to the database */
    private java.lang.CharSequence db_url;
    /** The database server */
    private java.lang.CharSequence db_server;
    /** The database port */
    private java.lang.CharSequence db_port;
    /** The database product name */
    private java.lang.CharSequence db_product_name;
    /** The database product version */
    private java.lang.CharSequence db_product_version;
    /** The name of the tool used to crawl the database */
    private java.lang.CharSequence crawl_tool;
    /** The timestamp of the crawl */
    private java.lang.CharSequence crawl_ts;
    /** The user name used to connect to the database */
    private java.lang.CharSequence user_name;
    /** The name of the catalog */
    private java.lang.CharSequence catalog_name;
    /** Any error ocurred while crawling the catalog? */
    private java.lang.Boolean has_error;
    /** If error ocurred, what's the error msg? */
    private java.lang.CharSequence error_msg;
    /** Any remarks on the catalog */
    private java.lang.CharSequence remarks;
    /** The catalog's schemas */
    private java.util.List<io.github.petersonjr.metadatacrawler.model.Schema> schemas;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.github.petersonjr.metadatacrawler.model.JdbcDatasource.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.db_url)) {
        this.db_url = data().deepCopy(fields()[0].schema(), other.db_url);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.db_server)) {
        this.db_server = data().deepCopy(fields()[1].schema(), other.db_server);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.db_port)) {
        this.db_port = data().deepCopy(fields()[2].schema(), other.db_port);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.db_product_name)) {
        this.db_product_name = data().deepCopy(fields()[3].schema(), other.db_product_name);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.db_product_version)) {
        this.db_product_version = data().deepCopy(fields()[4].schema(), other.db_product_version);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.crawl_tool)) {
        this.crawl_tool = data().deepCopy(fields()[5].schema(), other.crawl_tool);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.crawl_ts)) {
        this.crawl_ts = data().deepCopy(fields()[6].schema(), other.crawl_ts);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.user_name)) {
        this.user_name = data().deepCopy(fields()[7].schema(), other.user_name);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.catalog_name)) {
        this.catalog_name = data().deepCopy(fields()[8].schema(), other.catalog_name);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.has_error)) {
        this.has_error = data().deepCopy(fields()[9].schema(), other.has_error);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.error_msg)) {
        this.error_msg = data().deepCopy(fields()[10].schema(), other.error_msg);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.remarks)) {
        this.remarks = data().deepCopy(fields()[11].schema(), other.remarks);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.schemas)) {
        this.schemas = data().deepCopy(fields()[12].schema(), other.schemas);
        fieldSetFlags()[12] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing JdbcDatasource instance
     * @param other The existing instance to copy.
     */
    private Builder(io.github.petersonjr.metadatacrawler.model.JdbcDatasource other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.db_url)) {
        this.db_url = data().deepCopy(fields()[0].schema(), other.db_url);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.db_server)) {
        this.db_server = data().deepCopy(fields()[1].schema(), other.db_server);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.db_port)) {
        this.db_port = data().deepCopy(fields()[2].schema(), other.db_port);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.db_product_name)) {
        this.db_product_name = data().deepCopy(fields()[3].schema(), other.db_product_name);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.db_product_version)) {
        this.db_product_version = data().deepCopy(fields()[4].schema(), other.db_product_version);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.crawl_tool)) {
        this.crawl_tool = data().deepCopy(fields()[5].schema(), other.crawl_tool);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.crawl_ts)) {
        this.crawl_ts = data().deepCopy(fields()[6].schema(), other.crawl_ts);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.user_name)) {
        this.user_name = data().deepCopy(fields()[7].schema(), other.user_name);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.catalog_name)) {
        this.catalog_name = data().deepCopy(fields()[8].schema(), other.catalog_name);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.has_error)) {
        this.has_error = data().deepCopy(fields()[9].schema(), other.has_error);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.error_msg)) {
        this.error_msg = data().deepCopy(fields()[10].schema(), other.error_msg);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.remarks)) {
        this.remarks = data().deepCopy(fields()[11].schema(), other.remarks);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.schemas)) {
        this.schemas = data().deepCopy(fields()[12].schema(), other.schemas);
        fieldSetFlags()[12] = true;
      }
    }

    /**
      * Gets the value of the 'db_url' field.
      * The jdbc url used to connect to the database
      * @return The value.
      */
    public java.lang.CharSequence getDbUrl() {
      return db_url;
    }

    /**
      * Sets the value of the 'db_url' field.
      * The jdbc url used to connect to the database
      * @param value The value of 'db_url'.
      * @return This builder.
      */
    public io.github.petersonjr.metadatacrawler.model.JdbcDatasource.Builder setDbUrl(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.db_url = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'db_url' field has been set.
      * The jdbc url used to connect to the database
      * @return True if the 'db_url' field has been set, false otherwise.
      */
    public boolean hasDbUrl() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'db_url' field.
      * The jdbc url used to connect to the database
      * @return This builder.
      */
    public io.github.petersonjr.metadatacrawler.model.JdbcDatasource.Builder clearDbUrl() {
      db_url = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'db_server' field.
      * The database server
      * @return The value.
      */
    public java.lang.CharSequence getDbServer() {
      return db_server;
    }

    /**
      * Sets the value of the 'db_server' field.
      * The database server
      * @param value The value of 'db_server'.
      * @return This builder.
      */
    public io.github.petersonjr.metadatacrawler.model.JdbcDatasource.Builder setDbServer(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.db_server = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'db_server' field has been set.
      * The database server
      * @return True if the 'db_server' field has been set, false otherwise.
      */
    public boolean hasDbServer() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'db_server' field.
      * The database server
      * @return This builder.
      */
    public io.github.petersonjr.metadatacrawler.model.JdbcDatasource.Builder clearDbServer() {
      db_server = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'db_port' field.
      * The database port
      * @return The value.
      */
    public java.lang.CharSequence getDbPort() {
      return db_port;
    }

    /**
      * Sets the value of the 'db_port' field.
      * The database port
      * @param value The value of 'db_port'.
      * @return This builder.
      */
    public io.github.petersonjr.metadatacrawler.model.JdbcDatasource.Builder setDbPort(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.db_port = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'db_port' field has been set.
      * The database port
      * @return True if the 'db_port' field has been set, false otherwise.
      */
    public boolean hasDbPort() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'db_port' field.
      * The database port
      * @return This builder.
      */
    public io.github.petersonjr.metadatacrawler.model.JdbcDatasource.Builder clearDbPort() {
      db_port = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'db_product_name' field.
      * The database product name
      * @return The value.
      */
    public java.lang.CharSequence getDbProductName() {
      return db_product_name;
    }

    /**
      * Sets the value of the 'db_product_name' field.
      * The database product name
      * @param value The value of 'db_product_name'.
      * @return This builder.
      */
    public io.github.petersonjr.metadatacrawler.model.JdbcDatasource.Builder setDbProductName(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.db_product_name = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'db_product_name' field has been set.
      * The database product name
      * @return True if the 'db_product_name' field has been set, false otherwise.
      */
    public boolean hasDbProductName() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'db_product_name' field.
      * The database product name
      * @return This builder.
      */
    public io.github.petersonjr.metadatacrawler.model.JdbcDatasource.Builder clearDbProductName() {
      db_product_name = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'db_product_version' field.
      * The database product version
      * @return The value.
      */
    public java.lang.CharSequence getDbProductVersion() {
      return db_product_version;
    }

    /**
      * Sets the value of the 'db_product_version' field.
      * The database product version
      * @param value The value of 'db_product_version'.
      * @return This builder.
      */
    public io.github.petersonjr.metadatacrawler.model.JdbcDatasource.Builder setDbProductVersion(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.db_product_version = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'db_product_version' field has been set.
      * The database product version
      * @return True if the 'db_product_version' field has been set, false otherwise.
      */
    public boolean hasDbProductVersion() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'db_product_version' field.
      * The database product version
      * @return This builder.
      */
    public io.github.petersonjr.metadatacrawler.model.JdbcDatasource.Builder clearDbProductVersion() {
      db_product_version = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'crawl_tool' field.
      * The name of the tool used to crawl the database
      * @return The value.
      */
    public java.lang.CharSequence getCrawlTool() {
      return crawl_tool;
    }

    /**
      * Sets the value of the 'crawl_tool' field.
      * The name of the tool used to crawl the database
      * @param value The value of 'crawl_tool'.
      * @return This builder.
      */
    public io.github.petersonjr.metadatacrawler.model.JdbcDatasource.Builder setCrawlTool(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.crawl_tool = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'crawl_tool' field has been set.
      * The name of the tool used to crawl the database
      * @return True if the 'crawl_tool' field has been set, false otherwise.
      */
    public boolean hasCrawlTool() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'crawl_tool' field.
      * The name of the tool used to crawl the database
      * @return This builder.
      */
    public io.github.petersonjr.metadatacrawler.model.JdbcDatasource.Builder clearCrawlTool() {
      crawl_tool = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'crawl_ts' field.
      * The timestamp of the crawl
      * @return The value.
      */
    public java.lang.CharSequence getCrawlTs() {
      return crawl_ts;
    }

    /**
      * Sets the value of the 'crawl_ts' field.
      * The timestamp of the crawl
      * @param value The value of 'crawl_ts'.
      * @return This builder.
      */
    public io.github.petersonjr.metadatacrawler.model.JdbcDatasource.Builder setCrawlTs(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.crawl_ts = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'crawl_ts' field has been set.
      * The timestamp of the crawl
      * @return True if the 'crawl_ts' field has been set, false otherwise.
      */
    public boolean hasCrawlTs() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'crawl_ts' field.
      * The timestamp of the crawl
      * @return This builder.
      */
    public io.github.petersonjr.metadatacrawler.model.JdbcDatasource.Builder clearCrawlTs() {
      crawl_ts = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'user_name' field.
      * The user name used to connect to the database
      * @return The value.
      */
    public java.lang.CharSequence getUserName() {
      return user_name;
    }

    /**
      * Sets the value of the 'user_name' field.
      * The user name used to connect to the database
      * @param value The value of 'user_name'.
      * @return This builder.
      */
    public io.github.petersonjr.metadatacrawler.model.JdbcDatasource.Builder setUserName(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.user_name = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'user_name' field has been set.
      * The user name used to connect to the database
      * @return True if the 'user_name' field has been set, false otherwise.
      */
    public boolean hasUserName() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'user_name' field.
      * The user name used to connect to the database
      * @return This builder.
      */
    public io.github.petersonjr.metadatacrawler.model.JdbcDatasource.Builder clearUserName() {
      user_name = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'catalog_name' field.
      * The name of the catalog
      * @return The value.
      */
    public java.lang.CharSequence getCatalogName() {
      return catalog_name;
    }

    /**
      * Sets the value of the 'catalog_name' field.
      * The name of the catalog
      * @param value The value of 'catalog_name'.
      * @return This builder.
      */
    public io.github.petersonjr.metadatacrawler.model.JdbcDatasource.Builder setCatalogName(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.catalog_name = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'catalog_name' field has been set.
      * The name of the catalog
      * @return True if the 'catalog_name' field has been set, false otherwise.
      */
    public boolean hasCatalogName() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'catalog_name' field.
      * The name of the catalog
      * @return This builder.
      */
    public io.github.petersonjr.metadatacrawler.model.JdbcDatasource.Builder clearCatalogName() {
      catalog_name = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'has_error' field.
      * Any error ocurred while crawling the catalog?
      * @return The value.
      */
    public java.lang.Boolean getHasError() {
      return has_error;
    }

    /**
      * Sets the value of the 'has_error' field.
      * Any error ocurred while crawling the catalog?
      * @param value The value of 'has_error'.
      * @return This builder.
      */
    public io.github.petersonjr.metadatacrawler.model.JdbcDatasource.Builder setHasError(java.lang.Boolean value) {
      validate(fields()[9], value);
      this.has_error = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'has_error' field has been set.
      * Any error ocurred while crawling the catalog?
      * @return True if the 'has_error' field has been set, false otherwise.
      */
    public boolean hasHasError() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'has_error' field.
      * Any error ocurred while crawling the catalog?
      * @return This builder.
      */
    public io.github.petersonjr.metadatacrawler.model.JdbcDatasource.Builder clearHasError() {
      has_error = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'error_msg' field.
      * If error ocurred, what's the error msg?
      * @return The value.
      */
    public java.lang.CharSequence getErrorMsg() {
      return error_msg;
    }

    /**
      * Sets the value of the 'error_msg' field.
      * If error ocurred, what's the error msg?
      * @param value The value of 'error_msg'.
      * @return This builder.
      */
    public io.github.petersonjr.metadatacrawler.model.JdbcDatasource.Builder setErrorMsg(java.lang.CharSequence value) {
      validate(fields()[10], value);
      this.error_msg = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'error_msg' field has been set.
      * If error ocurred, what's the error msg?
      * @return True if the 'error_msg' field has been set, false otherwise.
      */
    public boolean hasErrorMsg() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'error_msg' field.
      * If error ocurred, what's the error msg?
      * @return This builder.
      */
    public io.github.petersonjr.metadatacrawler.model.JdbcDatasource.Builder clearErrorMsg() {
      error_msg = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'remarks' field.
      * Any remarks on the catalog
      * @return The value.
      */
    public java.lang.CharSequence getRemarks() {
      return remarks;
    }

    /**
      * Sets the value of the 'remarks' field.
      * Any remarks on the catalog
      * @param value The value of 'remarks'.
      * @return This builder.
      */
    public io.github.petersonjr.metadatacrawler.model.JdbcDatasource.Builder setRemarks(java.lang.CharSequence value) {
      validate(fields()[11], value);
      this.remarks = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'remarks' field has been set.
      * Any remarks on the catalog
      * @return True if the 'remarks' field has been set, false otherwise.
      */
    public boolean hasRemarks() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'remarks' field.
      * Any remarks on the catalog
      * @return This builder.
      */
    public io.github.petersonjr.metadatacrawler.model.JdbcDatasource.Builder clearRemarks() {
      remarks = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'schemas' field.
      * The catalog's schemas
      * @return The value.
      */
    public java.util.List<io.github.petersonjr.metadatacrawler.model.Schema> getSchemas() {
      return schemas;
    }

    /**
      * Sets the value of the 'schemas' field.
      * The catalog's schemas
      * @param value The value of 'schemas'.
      * @return This builder.
      */
    public io.github.petersonjr.metadatacrawler.model.JdbcDatasource.Builder setSchemas(java.util.List<io.github.petersonjr.metadatacrawler.model.Schema> value) {
      validate(fields()[12], value);
      this.schemas = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'schemas' field has been set.
      * The catalog's schemas
      * @return True if the 'schemas' field has been set, false otherwise.
      */
    public boolean hasSchemas() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'schemas' field.
      * The catalog's schemas
      * @return This builder.
      */
    public io.github.petersonjr.metadatacrawler.model.JdbcDatasource.Builder clearSchemas() {
      schemas = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public JdbcDatasource build() {
      try {
        JdbcDatasource record = new JdbcDatasource();
        record.db_url = fieldSetFlags()[0] ? this.db_url : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.db_server = fieldSetFlags()[1] ? this.db_server : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.db_port = fieldSetFlags()[2] ? this.db_port : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.db_product_name = fieldSetFlags()[3] ? this.db_product_name : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.db_product_version = fieldSetFlags()[4] ? this.db_product_version : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.crawl_tool = fieldSetFlags()[5] ? this.crawl_tool : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.crawl_ts = fieldSetFlags()[6] ? this.crawl_ts : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.user_name = fieldSetFlags()[7] ? this.user_name : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.catalog_name = fieldSetFlags()[8] ? this.catalog_name : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.has_error = fieldSetFlags()[9] ? this.has_error : (java.lang.Boolean) defaultValue(fields()[9]);
        record.error_msg = fieldSetFlags()[10] ? this.error_msg : (java.lang.CharSequence) defaultValue(fields()[10]);
        record.remarks = fieldSetFlags()[11] ? this.remarks : (java.lang.CharSequence) defaultValue(fields()[11]);
        record.schemas = fieldSetFlags()[12] ? this.schemas : (java.util.List<io.github.petersonjr.metadatacrawler.model.Schema>) defaultValue(fields()[12]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<JdbcDatasource>
    WRITER$ = (org.apache.avro.io.DatumWriter<JdbcDatasource>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<JdbcDatasource>
    READER$ = (org.apache.avro.io.DatumReader<JdbcDatasource>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
